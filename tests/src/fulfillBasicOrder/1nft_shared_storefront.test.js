import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "Seaport";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "ethereum";

const testLabel = "fulfillBasicOrder 1nft shared storefront"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://etherscan.io/tx/0xffbef375ac73d23070601645a4fcc53463b59014bcdfc91455f49b1b462bfd96
const inputData = "0xfb0f3ee1000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d423c655aa0000000000000000000000000001e24139610a29b64bfc474385028e52c9bfc1a8c000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000a604060890923ff400e8c6f5290461a83aedacec1e24139610a29b64bfc474385028e52c9bfc1a8c00000000000050000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000006395c4bf00000000000000000000000000000000000000000000000000000000648312bf0000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000641d184e51e2ecf50000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000002aa1efb94e0000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000aa87bee5380000000000000000000000000001e24139610a29b64bfc474385028e52c9bfc1a8c0000000000000000000000000000000000000000000000000000000000000041152a9148d75c36b8a00287365d978333cc8af31b66ad0ece32f30cdc72d2f3551a48fcff4d43bf8afb8fe00e755a26050f233fcb36fff82a389bc9399b390b6f1b00000000000000000000000000000000000000000000000000000000000000360c6ebe";
const models = [
    {
        name: 'nanox',
        steps: 5
    },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})
