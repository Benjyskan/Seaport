import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "SeaPort";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "ethereum";

const testLabel = "fulfillAdvancedOrder accept weth 1nft"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://etherscan.io/tx/0x0ab5271a43fbd3082a704efccc22116b9a1b5016629d3da206c7707058fd4f94
const inputData = "0xe7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006600000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000009717ff431785f1a95542baeabc5a776940d808e5000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062e65ee90000000000000000000000000000000000000000000000000000000062ea5080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c38a14fbad90f70000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000970d5e0bd5c4f193fccf7fd579590c5f5c69b2d98c2e14358898935fb397312b9a5a549efd12f734e2b34cb9cabcc5cefa06e207000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000009717ff431785f1a95542baeabc5a776940d808e50000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc900000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000007dc8546b0c422efc07c0b269323aa9b109da9e410000000000000000000000000000000000000000000000000000000000000041cf294c2bca224e7c17ee578fbae5ebfd2d9bd930449cf72118fd351659a9bcfd0d419b8efe0f7b56988d69dc02340635ba887a4a590662d5fb145cb15b1459321b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011300000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a1ad7755b1dd0ab14588b5852415a5ca516498ebfb507c5447b8dda56bd2668c2e3d56196708e66f2b40864f5fbb261fac82c58e94f3519bf4e19afec9e3f3b180e5adb512e59e3dd76c8972afb33dff4baf5b1d54640dbe84a60a4b03340f0193f42847ba17c1831528eb8c2d76a061f5dfd9349c4a763d178ebc5eda710c25f217477c80e7f497063baaf0b6894ecf299653cec06d3327557529568c0de769b23a27a58af5e96c4e3f719490b0cb54d6e4c834db7ca30fd2db0afd9d744574c654bca63a6bb5e7ae2950e60907777fdfe685e35f527dd1ec3beb5db1092861971eaf3bed6313f426a193a7397f035f6e67fdf74478361c30536a22b070239fd375063023027282e2aa74c6f607e3e5493823b10d070003891c5cbd1fc4619b2fa5a10244c25af8dcf0cd2cbbf8445156d8f291cefd83245f4fd75814d431e08";
const models = [
    {
        name: 'nanos',
        steps: 8
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})
