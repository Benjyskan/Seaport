import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "Seaport";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "ethereum";

const testLabel = "fulfillAdvancedOrder accept usdc 1nft"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://etherscan.io/tx/0xf4b5cd0642356d3f3d1c8d70a0e0006cd6efdffb4ef1beb2748694eb246ca828
const inputData = "0xe7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006600000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000a005f211f052c214a738b850a7d7871010895f73000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c0000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000633c3df2000000000000000000000000000000000000000000000000000000006340326e0000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000beac054c5fb8acc80000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000001312d00000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000005b9d7ee3ba252c41a07c2d6ec799eff8858bf117e13c2d6e2b6f92dcd1c606f1da8e17d00b35f836e7bdc173b15cc2f4efb6a97400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a005f211f052c214a738b850a7d7871010895f730000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000007a1200000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000eca48daaecf9ada03ec4f71654b5ba61cd1ddcdb0000000000000000000000000000000000000000000000000000000000000041d1a4d8d592457f9255efd772aef5b5606c3bb495fc28fe49bafb5d25d4a5eaaa03392f523ad256b2dcc660dadaaed98aec1d97d11488ca487d94fc062653a60c1ba00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000cf8e3aabb9e23bd910ed7e220b516330a23af709b48f3f62ab2892a8696c51fc1698d86651d0a180b1bb7cae27daf828c0e49005fc42c01c1970977c558168277ebb7dd0b428b7347462ad54237988597f2220f305863ec33c714e4bee9c68a434a688ac99a4c16d70d08cd3e032e80b49a6dcf1f447fe7f79a8429f19686ea531bae4cb185d7af58c0b0007dd558a0b9caeacaf5fdf8476aee9c086f6e160482c1c9e31ba0d9379cd544552571a1f9146892878f2174f0861c230be8807365e866362b9a598c79e92615ebaa209afe492b4a5807366c8565a7d50fd48eb62b4d61fcf143947632a6ebd28487c29c3b1709c8a2fec4c42678290bbb4e8d70ee4f1adb811858e9958ca6fdb3517fc81ce7997eaf731fd016ebc20a4b9aab6324cdddcfdf10cde88176546eb968580c1d242a5c7ec071f3adc8982bef5954974de3f94ff7faeea99497aee6b4874a3328bf0e1cb2ede8eda215c428864207de9b01cc813991b835e069080468c845235bd178dab4f2addcfd78eaca76b66cef181b360c6ebe";
const models = [
    {
        name: 'nanos',
        steps: 8
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})
