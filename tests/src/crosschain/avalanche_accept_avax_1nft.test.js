import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "SeaPort";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "avalanche";

const testLabel = "crosschain avalanche fulfillBasicOrder accept avax 1nft"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://snowtrace.io/tx/0xc90ef38cd88e0992396ab6ccd4e6ee919f2b5bcfe3cad5bc7338324900d5ac9f
const inputData = "0xfb0f3ee100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002079599a266a00000000000000000000000000097a7cc1cc4bf456251fe10dac36d6311bdbedc9c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000baea295321e89d4eccb19a0f3bf1e758b0fecd1a00000000000000000000000000000000000000000000000000000000000003330000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000635cf2c00000000000000000000000000000000000000000000000000000000063663b500000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000be0ec1f67f436a2b0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000d529ae9e860000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000004122f48cce98d7de554c3b9570278ae44c66497528233c1a1c3b5a554e8a896b124a90339a0828faf75862f8b402b5db547deba68029bc78ae7c7685edc6bf64b51b00000000000000000000000000000000000000000000000000000000000000360c6ebe";
const models = [
    {
        name: 'nanos',
        steps: 9
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})