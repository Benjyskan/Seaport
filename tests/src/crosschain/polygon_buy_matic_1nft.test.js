import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "Seaport";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "polygon";

const testLabel = "crosschain polygon fulfillBasicOrder buy matic 1nft"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://polygonscan.com/tx/0x1c46e17a9d9b7c777033f7227babd0498a198e1769139ec203ec4c0b4309dfe4
const inputData = "0xfb0f3ee10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002017a67f73174000000000000000000000000000ef3002fa625478ff6d780a6321a3552c85e40a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a035f4fdb4fef7752d7ba4ef5cdd7a7ffd9831ff00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000635e6f6000000000000000000000000000000000000000000000000000000000636263e00000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000edc09a2839323a6e0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000a26b00c1f0df003000390027140000faa71900000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000018632ee94d6395e0cd1ea6c7ee702712baf7c6d90000000000000000000000000000000000000000000000000000000000000041a523242aa855b9ae939f6ed76e759f68d7bd9e651857871ac1973384f46164f139f8b92f475c716af33e7aa2f862cd2b4de353e00e59dda8cd7a0c52b6eadd7d1c00000000000000000000000000000000000000000000000000000000000000360c6ebe";
const models = [
    {
        name: 'nanos',
        steps: 9
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})