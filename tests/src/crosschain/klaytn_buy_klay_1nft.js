import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "SeaPort";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "klaytn";

const testLabel = "crosschain klaytn fulfillBasicOrder buy klay 1nft"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://scope.klaytn.com/tx/0xceb7710948c8467b584d72b0cbcdba9977fb05c8883170de5411e2f2709ec9dd
const inputData = "0xfb0f3ee1000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002320ce76bfb5200000000000000000000000000007d1da88ab534254df7d7b9c5cda0154288d462940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e298c5e48d488d266c986b408a27ee924331bccc000000000000000000000000000000000000000000000000000000000000031a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063467e2900000000000000000000000000000000000000000000000000000000636f5ca90000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000d133d0e83bbb21820000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000f9ccd8a1c5080000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc900000000000000000000000000000000000000000000000002ed6689e54f18000000000000000000000000000e0ceea113e7f412c6912dae0bb573801a7f1e18b0000000000000000000000000000000000000000000000000000000000000041045b79917b3b6af87779312b68a4e1dcc280ec2b3d4bcb22ed289bafd8edfe5a26154032ee2ddddffe46b1ce893cd3deac2ec2e4bacaeb9fb657f101c4b9c7081c00000000000000000000000000000000000000000000000000000000000000360c6ebe";
const models = [
    {
        name: 'nanos',
        steps: 9
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})