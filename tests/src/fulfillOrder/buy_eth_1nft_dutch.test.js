
import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "SeaPort";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "ethereum";

const testLabel = "fulfillOrder buy eth 2nfts dutch"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://etherscan.io/tx/0x59ef13a0682bda6e070cc45d2e3422b4aabdb3f9dbb739ab9461fc20d0d1c523
const inputData = "0xb3a34c4c00000000000000000000000000000000000000000000000000000000000000400000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000093a865064c6694888573831597f03835dc90b375000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062e869180000000000000000000000000000000000000000000000000000000062f052000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006dea2b13e9a9100000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6e79b6f6b9875135aefdca4a7fba04d60658f06000000000000000000000000000000000000000000000000000000000000026d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007304e4169a70000000000000000000000000000000000000000000000000000020dcd3742c200000000000000000000000000093a865064c6694888573831597f03835dc90b37500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000031bced02db0000000000000000000000000000000000000000000000000000000e35fa931a0000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006379da05b60000000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000093a865064c6694888573831597f03835dc90b375000000000000000000000000000000000000000000000000000000000000004147a409a2480b1d4ee581c04c3e09848aaf9642675c945014634f2b4c564cdc2d13aa86da031c9d8346b7214415f718f575a8f557ed832e6dbdab8d6c74dd9f3c1b00000000000000000000000000000000000000000000000000000000000000";
const models = [
  {
    name: 'nanos',
    steps: 8
  },
  // {
  // 	name: 'nanox',
  // 	steps: 0
  // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
  const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
  processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})
