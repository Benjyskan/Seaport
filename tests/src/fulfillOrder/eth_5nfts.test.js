import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "Seaport";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "ethereum";

const testLabel = "fulfillOrder buy eth 5nfts"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://etherscan.io/tx/0x0f96dca09ec61aec5df003bb43314ddde7155bf41b106e9bccc7cb47aee822d8
const inputData = "0xb3a34c4c00000000000000000000000000000000000000000000000000000000000000400000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000074000000000000000000000000019fbbcbaeca3d1ce5015f1a7b1b8d34bde6bc366000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062e86c3d0000000000000000000000000000000000000000000000000000000063114abd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012010f08c02cb3f0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d9c5a09ffc3ee85f21bc8bce8fb0180106c7d6950000000000000000000000000000000000000000000000000000000000000ce4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d9c5a09ffc3ee85f21bc8bce8fb0180106c7d6950000000000000000000000000000000000000000000000000000000000000123000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d9c5a09ffc3ee85f21bc8bce8fb0180106c7d695000000000000000000000000000000000000000000000000000000000000062f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d9c5a09ffc3ee85f21bc8bce8fb0180106c7d6950000000000000000000000000000000000000000000000000000000000000a59000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d9c5a09ffc3ee85f21bc8bce8fb0180106c7d6950000000000000000000000000000000000000000000000000000000000000dd20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020028c196d20000000000000000000000000000000000000000000000000000020028c196d200000000000000000000000000019fbbcbaeca3d1ce5015f1a7b1b8d34bde6bc3660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e35fa931a0000000000000000000000000000000000000000000000000000000e35fa931a0000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a106ad2240000000000000000000000000000000000000000000000000000002a106ad224000000000000000000000000000a87b4bbf21cb3781725382e3cf84a39c26e8244400000000000000000000000000000000000000000000000000000000000000417f83b2ed22f5297d7d79759e7e69eb16ffb5f1084dc55e49a0d061c7d61811ed7ad93a9a6a70f09b5235ae2e088688bf836113bd6227acadcc3c9cea88d5830f1c00000000000000000000000000000000000000000000000000000000000000";
const models = [
    {
        name: 'nanos',
        steps: 8
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})
