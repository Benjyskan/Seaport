import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "SeaPort";
const contractAddr = "0x00000000006c3852cbef3e08e8df289169ede581";
const testNetwork = "ethereum";

const testLabel = "fulfillOrder buy eth 2nfts"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://etherscan.io/tx/0x072852931f133c25991e0ec2c4be9e286dfdb9639aa18f24cf728d8856cbfdec
const inputData = "0xb3a34c4c00000000000000000000000000000000000000000000000000000000000000400000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000560000000000000000000000000b2272ff131e7afd77927722b80a87eac82fa1392000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062e86abe0000000000000000000000000000000000000000000000000000000062e9bc3e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155bb9d00a9842e0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000101884c6c941b1a70e2c5597f33889023db9da230000000000000000000000000000000000000000000000000000000000001731000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000101884c6c941b1a70e2c5597f33889023db9daec67f735de800000000000000000000000000000000000000000000000000001ec67f735de800000000000000000000000000b2272ff131e7afd77927722b80a87eac82fa13920000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e1199594f8000000000000000000000000000000000000000000000000000000e1199594f8000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000384665653e000000000000000000000000000000000000000000000000000000384665653e00000000000000000000000000046f84f7fa304a1ebfd875ce25f98091b59cb6c5a000000000000000000000000000000000000000000000000000000000000004181ce2113edc3a840239f6b9c50eda8e9b7efebf243010d8ed0c612e02ca278fa6f85fdcbb7c524576d2b1dbf09582a32ec8c0e2b2394daf6c17a51ac062452a51b00000000000000000000000000000000000000000000000000000000000000";
const models = [
    {
        name: 'nanos',
        steps: 10
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})
