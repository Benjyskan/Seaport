import { nano_models, processTest, populateTransaction } from "../test.fixture";

const contractName = "SwapRouter02";
const contractAddr = "0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45";
const testNetwork = "ethereum";

const testLabel = "uniswap"; // <= Name of the test
const testDirSuffix = testLabel.toLowerCase().replace(/\s+/g, '_');

// https://etherscan.io/tx/0x95b761561e4162f30d130fbf91024138e68a2b5d421739c7a30204d43a9556a6
const inputData = "0x5ae401dc0000000000000000000000000000000000000000000000000000018423da76c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000e442712a6700000000000000000000000000000000000000000000000000038d675c4f980000000000000000000000000000000000000000000000000001fc64b11b5bc0000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000f8efd62b7f6e397a387a7fb232a54fe8f59c6b2a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000081bab233e459b2cb91d95690704717cd891eab1b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000";
const models = [
    {
        name: 'nanos',
        steps: 4
    },
    // {
    // 	name: 'nanox',
    // 	steps: 0
    // },
]

// populate unsignedTx from genericTx and get network chain id
const unsignedTx = populateTransaction(contractAddr, inputData, testNetwork);
// Process tests for each nano models
models.forEach((model) => {
    const nano_model = nano_models.find((nano_model) => nano_model.name === model.name)
    processTest(nano_model, model.steps, contractName, testLabel, testDirSuffix, unsignedTx, testNetwork)
})
